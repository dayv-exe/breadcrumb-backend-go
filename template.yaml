AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM template for Breadcrumb

Globals:
  Function:
    Timeout: 10
    Runtime: provided.al2023
    MemorySize: 128
    Environment:
      Variables:
        USERS_TABLE: !Ref UsersTable

Resources:
  # auth
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: BreadUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: false
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: nickname
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: birthdate
          AttributeDataType: String
          Required: false
          Mutable: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: bread-client
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH

  CognitoCustomMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bin/custom_email/custom_email.zip
      Handler: bootstrap
      Architectures: [arm64]
      Runtime: provided.al2023
      Description: Custom email logic for Cognito events
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: "*"
      Events:
        CognitoCustomMessageTrigger:
          Type: Cognito
          Properties:
            UserPool: !Ref CognitoUserPool
            Trigger: CustomMessage

  # api gateway
  BreadApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - DELETE
          - PUT
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
      StageName: prod
      Auth:
        Authorizers:
          CognitoAuthorizer:
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}"
              audience:
                - !Ref CognitoUserPoolClient
              claims:
                email_verified: "true"

  # to add newly created user to dynamo db
  UserPostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bin/signup_confirm/signup_confirm.zip
      Handler: bootstrap
      Architectures: [arm64]
      Description: Lambda function that runs after user successfully signs up to add them to dynamodb
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminGetUser
              - cognito-idp:AdminDeleteUser
            Resource: "*"
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Events:
        CognitoTrigger:
          Type: Cognito
          Properties:
            UserPool: !Ref CognitoUserPool
            Trigger: PostConfirmation

  PreSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bin/presignup/presignup.zip
      Handler: bootstrap
      Architectures: [arm64]
      Description: Lambda function that runs before user signs up to validate user details
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Events:
        CognitoTrigger:
          Type: Cognito
          Properties:
            UserPool: !Ref CognitoUserPool
            Trigger: PreSignUp

  NicknameAvailableFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bin/nickname_available/nickname_available.zip
      Handler: bootstrap
      Architectures: [arm64]
      Description: used during frontend login to check if the nickname user enters is not taken or somthing
      Events:
        NicknameAvailableApi:
          Type: HttpApi
          Properties:
            Path: /nickname_available/{nickname}
            Method: GET
            ApiId: !Ref BreadApi
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable

  AbortSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bin/abort_signup/abort_signup.zip
      Handler: bootstrap
      Architectures: [arm64]
      Description: deletes the user with the given id if they are unconfirmed
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
      Events:
        ApiRequest:
          Type: HttpApi
          Properties:
            Path: /abort_signup/{id}
            Method: GET
            ApiId: !Ref BreadApi
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminGetUser
              - cognito-idp:AdminDeleteUser
            Resource: "*"

  GetUserDetails:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 512
      CodeUri: bin/get_user_details/get_user_details.zip
      Handler: bootstrap
      Architectures: [arm64]
      Description: returns user details
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          USERS_TABLE: !Ref UsersTable
      Events:
        ApiRequest:
          Type: HttpApi
          Properties:
            Path: /user/{nickname}
            Method: GET
            ApiId: !Ref BreadApi
            Auth:
              Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminGetUser
            Resource: "*"

  EditUserDetails:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 512
      CodeUri: bin/edit_user_details/edit_user_details.zip
      Handler: bootstrap
      Architectures: [arm64]
      Description: allows user to edit some of their account information
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Events:
        ApiRequest:
          Type: HttpApi
          Properties:
            Path: /edit/profile
            Method: POST
            ApiId: !Ref BreadApi
            Auth:
              Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable

  RemoveStaleAccountsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bin/remove_stale_accounts/remove_stale_accounts.zip
      Handler: bootstrap
      Architectures: [arm64]
      Description: deletes unverified users from cognito when called
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
      Events:
        ScheduledRun:
          Type: Schedule
          Properties:
            Schedule: rate(12 hours)
            Name: DeleteUnconfirmedUsersSchedule
            Description: Runs every 12 hours, scans cognito users and deletes users with accounts older than 24 hours and are still unconfirmed
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:AdminDeleteUser
            Resource: "*"

  # user dynamodb table
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: nickname
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: NicknameIndex
          KeySchema:
            - AttributeName: nickname
              KeyType: HASH
          Projection:
            ProjectionType: ALL

Outputs:
  BreadApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${BreadApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  CognitoUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: "Cognito App Client ID"
    Value: !Ref CognitoUserPoolClient
