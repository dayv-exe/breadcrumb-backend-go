AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for Breadcrumb
Globals:
  Function:
    Timeout: 10
    Runtime: provided.al2023
    MemorySize: 512
    Environment:
      Variables:
        USERS_TABLE:
          Ref: UsersTable
Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: BreadUserPool
      UsernameAttributes:
      - email
      AutoVerifiedAttributes:
      - email
      Schema:
      - Name: email
        Required: true
        Mutable: true
      - Name: nickname
        AttributeDataType: String
        Required: false
        Mutable: true
      - Name: name
        AttributeDataType: String
        Required: false
        Mutable: true
      - Name: birthdate
        AttributeDataType: String
        Required: false
        Mutable: true
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: bread-client
      UserPoolId:
        Ref: CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
      - USER_PASSWORD_AUTH
  CognitoCustomMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../bin/custom_email/custom_email.zip
      Handler: bootstrap
      Architectures:
      - arm64
      Runtime: provided.al2023
      Description: Custom email logic for Cognito events
      Policies:
      - Statement:
          Effect: Allow
          Action:
          - ses:SendEmail
          - ses:SendRawEmail
          Resource: '*'
      Events:
        CognitoCustomMessageTrigger:
          Type: Cognito
          Properties:
            UserPool:
              Ref: CognitoUserPool
            Trigger: CustomMessage
  BreadApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowMethods:
        - GET
        - POST
        - DELETE
        - PUT
        AllowOrigins:
        - '*'
        AllowHeaders:
        - '*'
      StageName: prod
      Auth:
        Authorizers:
          CognitoAuthorizer:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
              audience:
              - Ref: CognitoUserPoolClient
  UserPostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../bin/signup_confirm/signup_confirm.zip
      Handler: bootstrap
      Architectures:
      - arm64
      Description: Lambda function that runs after user successfully signs up to add
        them to dynamodb
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UsersTable
      Environment:
        Variables:
          USERS_TABLE:
            Ref: UsersTable
      Events:
        CognitoTrigger:
          Type: Cognito
          Properties:
            UserPool:
              Ref: CognitoUserPool
            Trigger: PostConfirmation
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: pk
        AttributeType: S
      - AttributeName: sk
        AttributeType: S
      KeySchema:
      - AttributeName: pk
        KeyType: HASH
      - AttributeName: sk
        KeyType: RANGE
Outputs:
  BreadApiUrl:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${BreadApi}.execute-api.${AWS::Region}.amazonaws.com/prod/
  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value:
      Ref: CognitoUserPool
  CognitoUserPoolClientId:
    Description: Cognito App Client ID
    Value:
      Ref: CognitoUserPoolClient
